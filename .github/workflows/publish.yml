name: Publish

on:
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: 'Environment (default: develop)'
        default: 'develop'
  workflow_run:
    workflows: ["Integrate"]
    branches: [develop]
    types:
      - completed

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get.outputs.env }}
    steps:
      - name: Set Environment
        if: github.event_name == 'workflow_dispatch'
        run: |
          [[ "${{ github.event.inputs.environment }}" == *"prod"* ]] && echo "DEPLOY_ENV=PROD" >> $GITHUB_ENV || ([[ "${{ github.event.inputs.environment }}" == *"release/"* ]] && echo "DEPLOY_ENV=QA" >> $GITHUB_ENV || echo "DEPLOY_ENV=DEV" >> $GITHUB_ENV)

      - name: Set Environment
        if: github.event_name == 'workflow_run'
        run: |
          [[ "${{ github.ref }}" == "refs/heads/main" ]] && echo "DEPLOY_ENV=PROD" >> $GITHUB_ENV || ([[ "${{ github.ref }}" == *"release/"* ]] && echo "DEPLOY_ENV=QA" >> $GITHUB_ENV || echo "DEPLOY_ENV=DEV" >> $GITHUB_ENV)

      - name: Get Environment
        id: get
        run: |
          echo "env=${{ env.DEPLOY_ENV }}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Confirm Environment
        run: |
          echo ${{ needs.setup.outputs.environment }} && echo ${GITHUB_REF##*/}

      - name: Load Environment File
        env:
          ENV_FILE: ${{ secrets[format('{0}_ENV_FILE', needs.setup.outputs.environment)] }}
        run: |
          echo $ENV_FILE | base64 --decode > .env
          echo "BUILD=${{ github.sha }}" >> .env

      - name: Add Composer Authentication
        run: touch ~/.composer/auth.json; echo "${{ secrets.COMPOSER_AUTH }}" | base64 --decode | jq > ~/.composer/auth.json; cat ~/.composer/auth.json;

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs

      - name: Compile Assets
        uses: actions/setup-node@v4
      - run: npm ci
      - run: npm run build --if-present

      - name: Compress Build
        run: tar czf ~/build.tar.gz .

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" >> ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
          Host deploy
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/deploy.key
              StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets[format('{0}_SSH_HOST', needs.setup.outputs.environment)] }}
          SSH_KEY: ${{ secrets[format('{0}_SSH_KEY', needs.setup.outputs.environment)] }}
          SSH_USER: ${{ secrets[format('{0}_SSH_USER', needs.setup.outputs.environment)] }}

      - name: Upload Build
        run: |
          scp ~/build.tar.gz deploy:~/build.tar.gz

      - name: Deploy Build
        run: |
          echo "Unpack build into release directory"
          ssh deploy 'sudo rm -rf ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/old & mkdir release && tar xzf build.tar.gz -C "release"'
          echo "Move release directory to web directory"
          ssh deploy 'sudo rm -rf release/storage && sudo mv ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/web/ ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/old'
          ssh deploy 'sudo mv release ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/web'

      - name: Refresh Cache
        run: |
          echo "Configure symlinks and permissions"
          ssh deploy 'sudo ln -s ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/storage ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/web/storage'
          ssh deploy 'sudo chown -R www-data:www-data ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}'

      - name: Refresh Cache
        run: |
          ssh deploy 'sudo -u www-data php ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/web/artisan config:cache'
          ssh deploy 'sudo -u www-data php ${{ secrets[format('{0}_PROJECT_DIR', needs.setup.outputs.environment)] }}/web/artisan storage:link'

      - name: Refresh Services
        run: |
          ssh deploy 'sudo supervisorctl stop catchyourvision:* && sudo supervisorctl start catchyourvision:*'

      - name: Cleanup Build
        run: |
          ssh deploy 'sudo rm -r build.tar.gz'
